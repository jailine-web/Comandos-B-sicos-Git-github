Comandos git: 

Definição:

Git checkout permite modificar temporariamente os arquivos do projeto ao estado do commit anterior, retirando as alterações realizadas nos arquivos(antes do head)

Comando que retorna a versão anterior do commit(um commit antes do head): git checkout codigo_do_commit_desejado
>> Comando similar que realiza a mesma funcionalidade: git checkout HEAD~1  
OBS: Inserindo o comando: HEAD~2 (volta ao estado do antepenúltimo commit)

Para voltar ao estado original do último commit(da branch main) é necessário inserir o seguinte comando:git checkout main
Não modificar os arquivos qnd utilizar os checkouts antes de voltar a branch

Comandos utilizados para limpar modificações realizadas por engano.

git reset >> Comando que retira os arquivos da área de Staged(logo após é necessário digitar o comando clear abaixo).
git clear -df
git checkout -- . (Comando que limpa todas ás alterações.


<< Relacionado a framework >>

GITIGNORE arquivos que não devem ser salvos pelo git, ou seja, é um arquivo que não deve ser salvo pelo Git. Ficando dentro da pasta .gitignore
Geralmente o arquivo .gitignore fica na pasta principal do projeto, mas também pode ser insirida em subpastas.

>> EXEMPLOS DE ARQUIVOS COMUNS QUE NÃO DEVEM SER SALVOS PELO GIT <<

>>Arquivos compilados
# linguagens compiladas(C , C ++ , C# , Java ...) 

>>Arquivos de bibliotecas externas usadas no projeto
# Bibliotecas externas 

>>Arquivos de configurações da IDE
>>Arquivos de configuração do seu sistema

>> Apagar o commit sem perder as alterações já feitas <<
Comando: git reset --soft HEAD~1

>> Deletar commits e também modificações nos arquivos <<
Comando: git reset --hard <código do commit>

#Volta o projeto ao estado do pénúltimo commit
Comando: git reset --hard HEAD~1
